{"version": 3, "mappings": "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", "sources": ["..\\..\\flagsetcore.py"], "names": ["this._flagspec", "flagspec", "this._lib", "lib", "this._flags", "this._embedded_version", "flag_string", "flag_string.length", "this._load_binary", "this._load_text", "index", "superflag", "this._lib.re_sub", "m", "this._lib.re_search", "superflag.length", "this._lib.re_test", "this.set", "subflag_prefix", "subflags", "m[2].split", "subflags.length", "i", "m[0].length", "binary_string", "byte_list", "this._lib.b64decode", "byte_list.length", "embedded_version_string", "this._lib.join", "spec_version_string", "this._flagspec[\"binary\"].length", "flag_binary_info", "field_size", "byte_index", "bit_index", "value", "value_bit_index", "subfield_size", "this._lib.min", "src_byte", "flags", "this.has", "flag", "regex", "this._lib.push", "flag_regex", "flag_prefix", "this.get_list", "flags.length", "flag_prefix.length", "this._evaluate_condition", "mutex_set", "other_flag", "this.unset", "results", "subflag", "subsubflag", "superflag_obj", "item", "subflag_obj", "this._lib.is_string", "condition", "subcondition", "line_width", "first_line_width", "lines", "text", "text.length", "break_index", "paragraph_width", "parsed", "this.parse", "parts", "last_superflag", "pretty", "parts.length", "lines.length", "superflag_last_index", "superflag_prefix", "superflag_obj[1].length", "subsubflags", "subflag_obj_list", "subflag_obj_index", "segment", "paragraph_indent", "line", "wrap_width", "sublines", "this._wrap", "paragraph_indent.length", "prefix", "subline", "dst_byte", "subvalue", "this._lib.b64encode", "flags_to_disable", "flagset", "flagset.has", "flagset.unset", "log", "this._simple_disable", "flagset.get_list", "flags_regex", "flagset.has_any", "flagset.set", "this._simple_disable_regex", "only_flags", "only_flags.length", "start_include_flags", "start_exclude_flags", "start_exclude_flags.length", "start_include_flags.length", "flagset.get_list(\"^Cthrift:\").length", "flagset.get_list(\"^-smith:playable\").length", "flagset.get_list(\"^-smith:\").length", "all_spoiler_flags", "sparse_spoiler_flags", "all_spoiler_flags.length", "sparse_spoiler_flags.length", "hard_required_objectives", "hard_required_objectives.length", "required_count", "required_count.length", "required_objective_count", "win_flags", "flagset.get_list(\"^Obosscollector:\").length", "flagset.get_list(\"^Ogoldhunter:\").length", "win_flags.length", "pass_quest_flags", "pass_quest_flags.length", "char_objective_flags", "char_objective_flags.length", "required_chars", "ch", "f", "has_unavailable_characters", "pool", "this._lib.remove", "distinct_flags", "distinct_flags.length", "distinct_count", "required_chars.length", "random_prefix", "total_potential_bosses", "total_objective_count", "all_customized_random_flags", "num_random_objectives", "num_random_objectives.length", "flag_suffix", "all_customized_random_flags.length", "specific_boss_objectives", "all_specific_objectives", "specific_boss_objectives.length", "all_specific_objectives.length", "duplicate_check_count", "character_pool", "flagset.get_list(`^${random_prefix}`).length", "random_only_char_flags", "random_only_char_flags.length", "all_random_flags", "skip_pools", "random_flag", "duplicate_char_count", "desired_char_count", "current_char", "`${random_prefix}only`.length", "all_character_pool", "all_character_pool.length", "chars_to_remove", "actual_available_characters", "\",\".join"], "sourcesContent": ["# This is a simplified rewrite of the FlagSet \n# utility class core functionality, for the purpose \n# of being transpiled into JS using javascripthon.\n# As such, the following Python language features\n# should be avoided:\n#  - imports\n#  - named built-in methods of objects\n# Access to more advanced features should be provided\n# through the lib object passed to FlagSetCore.\n\nclass FlagSetCore:\n    # flagspec is a dictionary object that is generated\n    #   by compile_flags.py for both Python and JS, and\n    #   must be passed to the object on creation since\n    #   they are not part of this transpiled file.\n    # lib is an object exposing various utility functions,\n    #   in order to abstract away that they cannot be\n    #   transpiled directly:\n    #     b64encode(array_of_byte_values)\n    #     b64decode(string)\n    #     re_test(expression, string)\n    #       -> returns true/false\n    #     re_search(expression, string)\n    #       -> returns list of match groups, or null if no match\n    #     re_sub(expression, replacement, string)\n    #     push(list, value)\n    #     remove(list, value)\n    #     join(list, separator)\n    #     min(a, b)\n    #     is_string(obj)\n    #     keys(dict)\n    def __init__(self, flagspec, lib):\n        self._flagspec = flagspec\n        self._lib = lib\n        self._flags = {}\n        self._embedded_version = None\n\n    def load(self, flag_string):\n        if len(flag_string) > 0 and flag_string[0] == 'b':\n            self._load_binary(flag_string)\n        else:\n            self._load_text(flag_string)\n\n    def _load_text(self, flag_string):\n        self._flags = {}\n        self._embedded_version = None\n        index = 0\n        superflag = None\n        flag_string = self._lib.re_sub(r'\\s', '', flag_string)\n\n        while len(flag_string) > 0:\n            m = self._lib.re_search(r'^[A-Z]', flag_string)\n            if m:\n                superflag = m[0]\n                flag_string = flag_string[len(superflag):]\n                continue\n\n            m = self._lib.re_search(r'^-[a-z0-9_]+:?', flag_string)\n            if m:\n                superflag = m[0]\n                flag_string = flag_string[len(superflag):]\n                if not self._lib.re_test(r'\\:$', superflag):\n                    self.set(superflag)\n                continue\n\n            m = self._lib.re_search(r'^([a-z0-9_]+:)?([a-z0-9_]+(,[a-z0-9_]+)*)/?', flag_string)\n            if m:\n                if superflag is None:\n                    raise Exception(f\"Parse error: found subflag without superflag around '{m[0]}'\")\n                subflag_prefix = (m[1] if m[1] else '')\n                subflags = m[2].split(',')\n                for i in range(len(subflags)):\n                    self.set(superflag + subflag_prefix + subflags[i])\n                flag_string = flag_string[len(m[0]):]\n                continue\n\n            raise Exception(f\"Parse error around '{flag_string}'\")\n\n\n    def _load_binary(self, binary_string):\n        binary_string = binary_string[1:] # remove starting 'b'\n        byte_list = self._lib.b64decode(binary_string)\n        if len(byte_list) < 3:\n            raise Exception(\"Binary flag string too short\")\n        self._embedded_version = byte_list[:3]\n        for i in range(3):\n            if self._embedded_version[i] != self._flagspec['version'][i]:\n                embedded_version_string = self._lib.join([str(v) for v in embedded_version_string], '.')\n                spec_version_string = self._lib.join([str(v) for v in self._flagspec['version']], '.')\n                raise Exception(f\"Version mismatch: flag string is v{embedded_version_string}, expected v{spec_version_string}\")\n\n        byte_list = byte_list[3:]\n        \n        self._flags = {}\n        for i in range(len(self._flagspec['binary'])):\n            flag_binary_info = self._flagspec['binary'][i]\n\n            field_size = flag_binary_info['size']\n            byte_index = (flag_binary_info['offset'] >> 3)\n            bit_index = (flag_binary_info['offset'] & 0x7)\n\n            value = 0\n            value_bit_index = 0\n            while (field_size > 0):\n                subfield_size = self._lib.min(field_size, 8 - bit_index)\n                src_byte = (byte_list[byte_index] if byte_index < len(byte_list) else 0)\n                value = value | (((src_byte >> bit_index) & ((1 << subfield_size) - 1)) << value_bit_index)\n                value_bit_index += subfield_size\n                field_size -= subfield_size\n                byte_index += 1\n                bit_index = 0\n\n            if value == flag_binary_info['value']:\n                self.set(flag_binary_info['flag'])\n\n    def get_list(self, regex=None):\n        flags = []\n        for flag in self._flagspec['order']:\n            if self.has(flag):\n                if regex is None or self._lib.re_test(regex, flag):\n                    self._lib.push(flags, flag)\n        return flags\n\n    def get_suffix(self, flag_prefix):\n        flag_regex = '^' + flag_prefix\n        flags = self.get_list(flag_regex)\n        if len(flags) > 0:\n            return flags[0][len(flag_prefix):]\n        else:\n            return None\n\n    def get_version(self):\n        return self._embedded_version\n        \n    def has(self, flag):\n        if flag not in self._flagspec['order']:\n            raise Exception(f\"Invalid flag {flag}\")\n\n        if flag in self._flagspec['implicit']:\n            return self._evaluate_condition(self._flagspec['implicit'][flag])\n        elif flag in self._flags:\n            return True\n        else:\n            return False\n\n    def has_any(self, *flags):\n        for flag in flags:\n            if self.has(flag):\n                return True\n        return False\n\n    def has_all(self, *flags):\n        for flag in flags:\n            if not self.has(flag):\n                return False\n        return True\n\n    def set(self, flag):\n        if flag in self._flagspec['implicit']:\n            # Cannot set implicit flags\n            return\n\n        for mutex_set in self._flagspec['mutex']:\n            if flag in mutex_set:\n                for other_flag in mutex_set:\n                    if other_flag != flag:\n                        self.unset(other_flag)\n                break\n\n        self._flags[flag] = True\n\n    def unset(self, flag):\n        if flag in self._flags:\n            del self._flags[flag]\n\n    def parse(self):\n        results = []\n        for flag in self._flagspec['order']:\n            if not self.has(flag):\n                continue\n\n            if flag[0] == '-':\n                m = self._lib.re_search(r'^(-[a-z0-9_]+:?)([a-z0-9_]+)?$', flag)\n                superflag = m[1]\n                subflag = m[2]\n                subsubflag = None\n            else:\n                m = self._lib.re_search(r'^([A-Z])(([a-z0-9_]+:)?([a-z0-9_]+))?$', flag)\n                superflag = m[1]\n                subflag = (m[3] if m[3] else m[4])\n                subsubflag = (m[4] if m[3] else None)\n\n            superflag_obj = None\n            for item in results:\n                if item[0] == superflag:\n                    superflag_obj = item\n                    break\n            if not superflag_obj:\n                superflag_obj = [superflag, []]\n                self._lib.push(results, superflag_obj)\n\n            if subflag:\n                subflag_obj = None\n                for item in superflag_obj[1]:\n                    if item[0] == subflag:\n                        subflag_obj = item\n                        break\n                if not subflag_obj:\n                    subflag_obj = [subflag, []]\n                    self._lib.push(superflag_obj[1], subflag_obj)\n\n                if subsubflag:\n                    self._lib.push(subflag_obj[1], subsubflag)\n\n        return results\n\n    def _evaluate_condition(self, condition):\n        if self._lib.is_string(condition):\n            return self.has(condition)\n        elif condition[0] == 'not':\n            return not self._evaluate_condition(condition[1])\n        elif condition[0] == 'and':\n            for subcondition in condition[1:]:\n                if not self._evaluate_condition(subcondition):\n                    return False\n            return True\n        elif condition[0] == 'or':\n            for subcondition in condition[1:]:\n                if self._evaluate_condition(subcondition):\n                    return True\n            return False\n        else:\n            raise Exception(f\"Unsupported condition type {condition[0]}\")\n\n    def _wrap(self, text, first_line_width, paragraph_width):\n        line_width = first_line_width\n        lines = []\n        while len(text) > line_width:\n            break_index = line_width\n            for i in range(line_width - 1, -1, -1):\n                if text[i] == ',' or text[i] == ')' or text[i] == ' ':\n                    break_index = i + 1\n                    break\n\n            self._lib.push(lines, text[:break_index])\n            text = text[break_index:]\n            line_width = paragraph_width\n\n        if len(text) > 0:\n            self._lib.push(lines, text)\n\n        return lines\n\n\n    def to_string(self, pretty=False, wrap_width=None):\n        parsed = self.parse()\n\n        # in pretty mode, parts is the components of the current line being built\n        # in not pretty mode, parts is the components of the full complete string\n        parts = []\n\n        # in pretty mode, as parts is converted into lines, they are added here\n        lines = []\n\n        last_superflag = None\n        for superflag_obj in parsed:\n            if not pretty and len(parts) > 0:\n                self._lib.push(parts, ' ')\n            elif pretty and len(lines) > 0 and last_superflag[0] != '-':\n                self._lib.push(lines, '')\n\n            superflag = superflag_obj[0]\n            last_superflag = superflag\n            superflag_last_index = len(superflag) - 1 # needed to workaround https://github.com/metapensiero/metapensiero.pj/issues/78\n            superflag_prefix = superflag + (' ' if pretty and superflag[superflag_last_index] != ':' else '')\n            self._lib.push(parts, superflag_prefix)\n\n            if len(superflag_obj[1]) > 0:\n                if superflag[0] == '-':\n                    # for subflags of -switch style flags, we want them to be\n                    # rendered in one comma-separated parentheses, so create\n                    # an object with a blank subflag and with the original subflag\n                    # list as subsubflags\n                    subsubflags = []\n                    for subflag_obj in superflag_obj[1]:\n                        self._lib.push(subsubflags, subflag_obj[0])\n                    subflag_obj_list = [ ['', subsubflags] ]\n                else:\n                    subflag_obj_list = superflag_obj[1]\n\n                subflag_obj_index = 0\n                for subflag_obj in subflag_obj_list:\n                    if pretty and len(parts) == 0:\n                        # indent new line\n                        self._lib.push(parts, ' /')\n\n                    segment = subflag_obj[0] + self._lib.join(subflag_obj[1], ',')\n                    if pretty:\n                        self._lib.push(parts, segment)\n                        paragraph_indent = '   '\n                        line = self._lib.join(parts, '')\n                        if wrap_width is None:\n                            sublines = [line]\n                        else:\n                            sublines = self._wrap(line, wrap_width, wrap_width - len(paragraph_indent))\n\n                        prefix = ''\n                        for subline in sublines:\n                            self._lib.push(lines, prefix + subline)\n                            prefix = paragraph_indent\n\n                        parts = []\n                    else:\n                        if subflag_obj_index > 0:\n                            self._lib.push(parts, '/')\n                        self._lib.push(parts, segment)\n\n                    subflag_obj_index += 1\n\n            elif pretty:\n                self._lib.push(lines, parts[0])\n                parts = []\n\n        if not pretty:\n            line = self._lib.join(parts, '')\n            if wrap_width is not None:\n                line = self._lib.join(self._wrap(line, wrap_width, wrap_width), '\\n')\n            return line\n        else:\n            return self._lib.join(lines, '\\n')\n\n\n    def to_binary(self):\n        byte_list = []\n        for i in range(3):\n            self._lib.push(byte_list, self._flagspec['version'][i])\n\n        for flag_binary_info in self._flagspec['binary']:\n            if not self.has(flag_binary_info['flag']):\n                continue\n\n            value = flag_binary_info['value']\n            field_size = flag_binary_info['size']\n            byte_index = (flag_binary_info['offset'] >> 3) + 3  # +3 to account for version bytes\n            bit_index = (flag_binary_info['offset'] & 0x7)\n            #print(f\"{flag_binary_info['flag']:20} : {value}[{field_size}] @ {flag_binary_info['offset']} -> {byte_index}.{bit_index}\")\n\n            while field_size > 0:\n                while byte_index >= len(byte_list):\n                    self._lib.push(byte_list, 0)\n\n                dst_byte = byte_list[byte_index]\n                subfield_size = self._lib.min(field_size, 8 - bit_index)\n                subvalue = value & ((1 << subfield_size) - 1)\n                #print(f\"  Apply {subvalue << bit_index:02X} to byte {byte_index}\")\n                byte_list[byte_index] = dst_byte | (subvalue << bit_index)\n\n                value >>= subfield_size\n                field_size -= subfield_size\n                bit_index = 0\n                byte_index += 1\n\n        return 'b' + self._lib.b64encode(byte_list)\n\n\n#----------------------------------------------------------------------------------------\n\n# This class handles flagset verification and correction.\n\nclass FlagLogicCore:\n    def __init__(self, flagspec, lib):\n        self._flagspec = flagspec\n        self._lib = lib\n\n    def _simple_disable(self, flagset, log, prefix, flags_to_disable):\n        for flag in flags_to_disable:\n            if flagset.has(flag):\n                flagset.unset(flag)\n                self._lib.push(log, ['correction', prefix + '; removed ' + flag])\n\n    def _simple_disable_regex(self, flagset, log, prefix, flags_regex):\n        self._simple_disable(flagset, log, prefix, flagset.get_list(flags_regex))\n\n    # alters the flagset in place\n    # returns a list of 2-tuples describing errors found and fixes made:\n    #             [ <cleanup | correction | error>, <string describing fix> ]\n    def fix(self, flagset):\n        log = []\n\n        # NOTE: mutex flags ARE handled internally by FlagSet, don't worry about them here        \n        # key item flags\n        if flagset.has_any('Ksummon', 'Kmoon', 'Kmiab') and not flagset.has('Kmain'):\n            flagset.set('Kmain')\n            self._lib.push(log, ['correction', 'Advanced key item randomizations are enabled; forced to add Kmain'])\n\n        if flagset.has('Kvanilla'):\n            self._simple_disable(flagset, log, 'Key items not randomized', ['Kunsafe','Kunweighted'])\n\n        if flagset.has('Klstmiab') and flagset.has('Kmiab') and flagset.has_any('Kmoon','Kunsafe'):\n            self._simple_disable(flagset, log, 'LST miabs already included', ['Klstmiab'])\n\n        if flagset.has('Cvanilla'):\n            self._simple_disable_regex(flagset, log, 'Characters not randomized', r'^C(maybe|distinct:|only:|no:)')\n        else:\n            only_flags = flagset.get_list(r'^Conly:')\n            if len(only_flags) > 0:\n                self._simple_disable_regex(flagset, log, 'Conly:* flag(s) are specified', r'^Cno:')\n\n        if flagset.has('Chero'):\n            self._simple_disable_regex(flagset, log, 'Hero challenge includes smith weapon', r'^-smith:')\n        \n        start_include_flags = flagset.get_list(r'^Cstart:(?!not_)')\n        start_exclude_flags = flagset.get_list(r'^Cstart:not_')\n        if len(start_exclude_flags) > 0 and len(start_include_flags) > 0:\n            self._simple_disable_regex(flagset, log, 'Inclusive Cstart:* flags are specified', r'^Cstart:not_')\n        if len(start_include_flags) > 1 and flagset.has('Cstart:any'):\n            self._simple_disable_regex(flagset, log, 'Cstart:any is specified', r'^Cstart:(?!any|not_)')\n\n        if flagset.has('Kstart:magma') and flagset.has('Kforce:hook'):\n            self._simple_disable_regex(flagset, log, 'Force hook with start:Magma', r'^Kforce:hook')\n        if flagset.has('Cnekkie') and len(flagset.get_list(r'^Cthrift:')) > 0:\n            self._simple_disable_regex(flagset, log, 'Starting gear specified by Cnekkie', r'^Cthrift:')\n\n        if flagset.has('Tempty'):\n            self._simple_disable_regex(flagset, log, 'Treasures are empty', r'^Tsparse:')\n\n        if flagset.get_list(rf'^Tsparse') != 0 and not flagset.get_list(r'^Tsparsey:'):\n            flagset.set('Tsparsey:overworld')\n            flagset.set('Tsparsey:underground')\n            flagset.set('Tsparsey:moon')\n\n        if flagset.has_any('Tempty', 'Tvanilla', 'Tshuffle'):\n            self._simple_disable_regex(flagset, log, 'Treasures are not random', r'^Tmaxtier:')\n            self._simple_disable(flagset, log, 'Treasures are not random', ['Tplayable'])\n\n        if flagset.has_any('Svanilla', 'Scabins', 'Sempty'):\n            self._simple_disable_regex(flagset, log, 'Shops are not random', r'^Sno:([^j]|j.)')\n            self._simple_disable(flagset, log, 'Shops are not random', ['Sunsafe'])\n\n        if flagset.has('Sshuffle'):\n            self._simple_disable(flagset, log, 'Shops are only shuffled', ['Sno:life'])\n\n        if flagset.has('Bvanilla'):\n            self._simple_disable(flagset, log, 'Bosses not randomized', ['Bunsafe'])\n\n        if flagset.has('Evanilla'):\n            self._simple_disable(flagset, log, 'Encounters are vanilla', ['Ekeep:behemoths', 'Ekeep:doors', 'Edanger'])\n\n        if len(flagset.get_list(r'^-smith:playable')) == len(flagset.get_list(r'^-smith:')):\n            self._simple_disable(flagset, log, 'No smith item requested', ['-smith:playable'])\n\n        if flagset.has('-monsterflee'):\n            flagset.set('-monsterevade')\n            self._lib.push(log, ['correction', 'Monsters require evade to flee; forced to add -monsterevade'])\n\n        all_spoiler_flags = flagset.get_list(r'^-spoil:')\n        sparse_spoiler_flags = flagset.get_list(r'^-spoil:sparse')\n        if (len(all_spoiler_flags) > 0 and len(all_spoiler_flags) == len(sparse_spoiler_flags)):\n            self._simple_disable_regex(flagset, log, 'No spoilers requested', r'^-spoil:sparse')\n\n        # Objectives logic\n        if flagset.has('Onone'):\n            self._simple_disable_regex(flagset, log, 'No objectives set', r'^O(win|req):')\n            self._simple_disable(flagset, log, 'No objectives set', ['-exp:objectivebonus'])\n        else:\n            # Force Oreq:all if a req: flag is not specified\n            if not flagset.get_list(r'^Oreq:'):\n                flagset.set('Oreq:all')\n                self._lib.push(log, ['correction', 'Required number of objectives not specified; setting Oreq:all'])\n\n            hard_required_objectives = flagset.get_list(r'^Ohardreq:')            \n            if flagset.has('Oreq:all'):                \n                if len(hard_required_objectives) != 0:\n                    self._simple_disable_regex(flagset, log, 'Removing hard required flags', r'^Ohardreq:')\n                    self._lib.push(log, ['correction', 'Hard required objectives found, but all objectives are already required.  Ignoring hard required flags.'])                    \n            else:\n                required_count = flagset.get_list(r'^Oreq:')\n                if len(required_count ) > 0 :\n                    required_objective_count = int(self._lib.re_sub(r'^Oreq:', '', required_count[0]))\n                    if len(hard_required_objectives) > required_objective_count:\n                        self._simple_disable_regex(flagset, log, 'Changing required count', r'^Oreq:')\n                        flagset.set(f'Oreq:{len(hard_required_objectives)}')\n                        self._lib.push(log, ['correction', 'More hard required objectives set than number of objectives required, increasing required objective count to {len(hard_required_objectives)}.'])\n\n            win_flags = flagset.get_list(r'^Owin:')\n            # make sure at least some bosses are specified in boss hunt\n            if flagset.has('Omode:bosscollector') and len(flagset.get_list(r'^Obosscollector:'))==0:\n                flagset.set('Obosscollector:5')\n                self._lib.push(log, ['correction', 'bosscollector enabled without specifying number of bosses, adding Obosscollector:5'])\n\n            if flagset.has('Omode:goldhunter') and len(flagset.get_list(r'^Ogoldhunter:'))==0:\n                flagset.set('Ogoldhunter:100')\n                self._lib.push(log, ['correction', 'goldhunter enabled without specifying amount of gold, adding Ogoldhunter:100'])\n\n            # Force Owin:crystal if classicforge, otherwise force Owin:game if no win result specified\n            if flagset.has('Omode:classicforge') and not flagset.has('Owin:crystal'):\n                flagset.set('Owin:crystal')\n                self._lib.push(log, ['correction', 'Classic Forge is enabled; forced to add Owin:crystal'])\n            elif len(win_flags) == 0:\n                flagset.set('Owin:game')\n                self._lib.push(log, ['correction', 'Objectives set without outcome specified; added Owin:game'])\n        \n            if flagset.has('Ctreasure'):\n                flagset.set('Cnofree')\n                self._lib.push(log, ['correction', 'Ctreasure set, auto-assigning Cnofree'])\n\n            # force Pkey if pass objective is set\n            pass_quest_flags = flagset.get_list(r'^O\\d+:quest_pass$')\n            if len(pass_quest_flags) > 0 and flagset.has('Pnone'):\n                flagset.set('Pkey')\n                self._lib.push(log, ['correction', 'Pass objective is set without a pass flag; forced to add Pkey'])\n\n            # check for conflict between objective required characters and available ones\n            char_objective_flags = flagset.get_list(r'^O\\d+:char_')\n            if len(char_objective_flags) > 0:\n                required_chars = []\n                for f in char_objective_flags:\n                    ch = self._lib.re_sub(r'^O\\d+:char_', '', f)\n                    self._lib.push(required_chars, ch)\n\n                if flagset.has('Cvanilla'):\n                    has_unavailable_characters = False\n                    if 'cecil' in required_chars:\n                        has_unavailable_characters = True\n                    elif (flagset.has('Cnofree')):\n                        if 'edward' in required_chars or 'tellah' in required_chars or 'palom' in required_chars or 'porom' in required_chars:\n                            has_unavailable_characters = True\n                    elif (flagset.has('Cnoearned')):\n                        if 'rydia' in required_chars or 'kain' in required_chars or 'rosa' in required_chars or 'yang' in required_chars or 'cid' in required_chars or 'edge' in required_chars or 'fusoya' in required_chars:\n                            has_unavailable_characters = True\n\n                    if has_unavailable_characters:\n                        self._lib.push(log, ['error', \"Character objectives are set for characters that cannot be found in vanilla character assignment\"])\n                else:\n                    only_flags = flagset.get_list(r'^Conly:')\n                    pool = []\n                    if len(only_flags) > 0:\n                        for f in only_flags:\n                            ch = self._lib.re_sub(r'^Conly:', '', f)\n                            self._lib.push(pool, ch)\n                    else:\n                        pool = ['cecil', 'kain', 'rydia', 'edward', 'tellah', 'rosa', 'yang', 'palom', 'porom', 'cid', 'edge', 'fusoya']\n                        for f in flagset.get_list(r'^Cno:'):\n                            ch = self._lib.re_sub(r'^Cno:', '', f)\n                            self._lib.remove(pool, ch)\n\n                    for ch in required_chars:\n                        if ch not in pool:\n                            self._lib.push(log, ['error', \"Character objectives are set for characters excluded from the randomization.\"])\n                            break\n\n                    distinct_flags = flagset.get_list(r'^Cdistinct:')\n                    if len(distinct_flags) > 0:\n                        distinct_count = int(self._lib.re_sub(r'^Cdistinct:', '', distinct_flags[0]))\n                        if distinct_count < len(required_chars):\n                            self._lib.push(log, ['error', \"More character objectives are set than distinct characters allowed in the randomization.\"])\n\n                if flagset.has('Cnofree') and flagset.has('Cnoearned'):\n                    self._lib.push(log, ['error', \"Character objectives are set while no character slots will be filled\"])                           \n            \n            for random_prefix in ['Orandom:char', 'Orandom2:char', 'Orandom3:char']:    \n                if flagset.has(random_prefix) and flagset.has('Cnoearned') and flagset.has('Cnofree') and not flagset.has('Ctreasure'):\n                    flagset.unset(random_prefix)\n                    self._lib.push(log, ['correction', f'Random character objectives in the pool while no character slots will be filled. Removed {random_prefix}.'])\n                    \n            # remove random quest type specifiers if no random objectives specified\n            for random_prefix in ['Orandom:', 'Orandom2:', 'Orandom3:']:\n                if not flagset.get_list(rf'^{random_prefix}\\d'):\n                    self._simple_disable_regex(flagset, log, f'No random objectives specified for pool {random_prefix}', rf'^{random_prefix}[^\\d]')\n\n            total_potential_bosses = 0\n            total_objective_count = 0\n            for random_prefix in ['Orandom:', 'Orandom2:', 'Orandom3:']:\n                if not flagset.get_list(rf'^{random_prefix}'):\n                    continue\n                all_customized_random_flags = flagset.get_list(rf'^{random_prefix}[^\\d]')\n                num_random_objectives = flagset.get_list(rf'^{random_prefix}\\d')\n                if len(num_random_objectives) == 0:\n                    continue\n\n                flag_suffix = self._lib.re_sub(rf'^{random_prefix}', '', num_random_objectives[0])\n                if len(all_customized_random_flags) == 0 or f'{random_prefix}boss' in all_customized_random_flags:                                        \n                    total_potential_bosses += int(flag_suffix)\n                total_objective_count += int(flag_suffix)\n            specific_boss_objectives = flagset.get_list(rf'^O[\\d]:boss_')\n            all_specific_objectives = flagset.get_list(rf'^O[\\d]:')\n            total_potential_bosses += len(specific_boss_objectives)\n            total_objective_count += len(all_specific_objectives)\n            if flagset.has('Omode:fiends'):\n                total_potential_bosses += 6\n                total_objective_count += 6\n            if flagset.has('Omode:classicforge'):\n                total_objective_count += 1\n            if flagset.has('Omode:classicgiant'):\n                total_objective_count += 1\n            if flagset.has('Omode:dkmatter'):\n                total_objective_count += 1\n\n            if total_potential_bosses > 34:\n                self._lib.push(log, ['error', \"More than 34 potential bosses specified\"])                           \n            if total_objective_count > 32:\n                self._lib.push(log, ['error', \"More than 32 objectives specified\"])                           \n            #print(f'Total potential bosses is {total_potential_bosses} Objectives is {total_objective_count}')            \n\n            # test if # of random req quests exceeds the random only characters count\n            # test if the total amount of avail chararcters exceeds the required_character_count\n            duplicate_check_count = 0\n            character_pool = []\n            for random_prefix in ['Orandom:', 'Orandom2:', 'Orandom3:']:                         \n                if len(flagset.get_list(rf'^{random_prefix}')) == 0:\n                    continue\n\n                random_only_char_flags = flagset.get_list(rf'{random_prefix}only')\n                if not flagset.has(f'{random_prefix}char') and len(random_only_char_flags) > 0:\n                    flagset.set(f'{random_prefix}char')\n                    self._lib.push(log, ['correction', f'Random objectives requiring specific characters set without Orandom:char; setting {random_prefix}char'])\n\n                all_customized_random_flags = flagset.get_list(rf'^{random_prefix}[^\\d]')\n                if len(all_customized_random_flags) != 0 and f'{random_prefix}char'not in all_customized_random_flags:\n                    continue\n\n                all_random_flags = flagset.get_list(rf'^{random_prefix}')                \n                skip_pools = False\n                \n                for random_flag in all_random_flags:\n                    flag_suffix = self._lib.re_sub(rf'^{random_prefix}', '', random_flag)\n                    if self._lib.re_test(r'\\d', flag_suffix):\n                        required_objective_count = int(flag_suffix)\n                    elif not self._lib.re_test(r'only', flag_suffix) and not self._lib.re_test(r'char', flag_suffix):\n                        skip_pools = True\n                        break\n                                \n                duplicate_char_count = 0\n                desired_char_count = 0\n                if len(random_only_char_flags) > 0 and len(random_only_char_flags) < required_objective_count:\n                    self._lib.push(log, ['error', f'Random objectives requiring less specific characters ({len(random_only_char_flags)}) than number of objectives ({required_objective_count})'])\n                    break\n                elif len(random_only_char_flags) > 0 :\n                    for random_flag in random_only_char_flags:\n                        desired_char_count += 1\n                        current_char = random_flag[len(f'{random_prefix}only'):]\n                        if current_char not in character_pool:\n                            self._lib.push(character_pool, current_char)\n                        else:\n                            duplicate_char_count+=1\n                else:\n                    all_character_pool = ['cecil', 'kain', 'rydia', 'edward', 'tellah', 'rosa', 'yang', 'palom', 'porom', 'cid', 'edge', 'fusoya']\n                    desired_char_count = len(all_character_pool)\n                    for current_char in all_character_pool:\n                        if current_char not in character_pool:\n                            self._lib.push(character_pool, current_char)\n                        else:\n                            duplicate_char_count+=1\n                chars_to_remove = duplicate_check_count                \n                if duplicate_char_count < duplicate_check_count:\n                    chars_to_remove = duplicate_char_count\n                actual_available_characters = desired_char_count - chars_to_remove\n                #print (f'actual_available_characters {actual_available_characters} desired_char_count {desired_char_count} chars_to_remove {chars_to_remove} duplicate_char_count {duplicate_char_count} duplicate_check_count {duplicate_check_count}')\n                if actual_available_characters < required_objective_count and skip_pools == False:\n                    self._lib.push(log, ['error', f'Not enough unique characters for pool {random_prefix}.  Another pool could potentially consume some or all of these characters {random_only_char_flags}' + ','.join(flagset.get_list(rf'^{random_prefix}'))])\n                    break\n                duplicate_check_count += required_objective_count            \n        return log\n\n\n"]}